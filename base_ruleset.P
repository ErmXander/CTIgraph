/******************************************************/
/****         Predicates Declaration              *****/
/******************************************************/

primitive(attackerLocated(_pod)).

primitive(vulExists(_library, _libVer, _vulID)).
primitive(hasLibrary(_pod, _library, _libVer)).
primitive(hasArtifact(_component, _artID)).
primitive(exposesService(_pod, _servName, _proto, _port)).
primitive(misconfiguration(_pod, _type)).
primitive(mounts(_pod, _type, _path)).
primitive(dependsOn(_pod1, _pod2)).
primitive(hasTrustLevel(_pod, _trustLevel)).
primitive(netRule(_pod1, _pod2, _proto, _port, _direction)).
primitive(techniqueArtifact(_tID, _artID)).


derived(hacl(_src, _dst, _prot, _port)).
derived(vulExists(_pod, _vulID)).
derived(hasArtifact(_pod, _artID)).
derived(techniqueTargets(_tID, _pod)).
derived(compromised(_pod, _type)).
derived(compromised(_pod, _type, _level)).
derived(reachable(_pod, _protocol, _port)).
derived(codeExec(_pod)).
derived(credentialAccess(_account)).
derived(fileAccess(_pod, _file, _perm)).
derived(privilege(_pod, _level)).

meta(attackGoal(_)).
meta(advances(_, _)).


/******************************************************/
/****         Tabling Predicates                  *****/
/*   All derived predicates should be tabled          */
/******************************************************/

:- table hacl/4.
:- table vulExists/2.
:- table hasArtifact/2.
:- table techniqueTargets/2.
:- table compromised/2.
:- table compromised/1.
:- table reachable/1.
:- table codeExec/1.
:- table credentialAccess/1.
:- table fileAccess/3.
:- table privilege/2.


/******************************************************/
/****         Interaction Rules                   *****/
/******************************************************/


/******** Section vulnerability ********/

interaction_rule(
  (vulExists(Pod, VulID) :-
	vulExists(Lib, LibVer, VulID),
	hasLibrary(Pod, Lib, LibVer)),
  rule_desc('',
  0.0)).


/******** Section artifact ********/

interaction_rule(
  (hasArtifact(Pod, ArtID) :-
	hasLibrary(Pod, Lib, LibVer),
    hasArtifact(Lib, ArtID)),
  rule_desc('',
  0.0)).

interaction_rule(
  (hasArtifact(Pod, ArtID) :-
	exposesService(Pod, ServName, Proto, Port),
    hasArtifact(ServName, ArtID)),
  rule_desc('',
  0.0)).


/******** Section network ********/

interaction_rule(
  (hacl(Psrc, Pdst, Protocol, Port) :-
	netRule(PSrc, Pdst, Protocol, Port, egress),
	netRule(Pdst, Psrc, Protocol, Port, ingress)),
  rule_desc('',
  0.0)).

interaction_rule(
  (hacl(P, internet, Protocol, Port) :-
	netRule(P, internet, Protocol, Port, egress)),
  rule_desc('',
  0.0)).

interaction_rule(
  (hacl(internet, P, Protocol, Port) :-
	netRule(P, internet, Protocol, Port, ingress)),
  rule_desc('',
  0.0)).

interaction_rule(
  (reachable(P, Protocol, Port) :-
    attackerLocated(Zone),
	hacl(Zone, P, Protocol, Port)),
  rule_desc('',
  0.0)).

interaction_rule(
  (reachable(P2, Protocol, Port) :-
	codeExec(P1),
	advances(P1, P2),
      hacl(P1, P2, Protocol, Port)),
  rule_desc('',
  0.0)).


/******** Section compromission ********/

interaction_rule(
  (codeExec(Pod) :-
	compromised(Pod, codeExec)),
  rule_desc('',
  0.0)).

interaction_rule(
  (fileAccess(Pod, File, Perm) :-
	compromised(Pod, fileAccess, Perm)),
  rule_desc('',
  0.0)).

interaction_rule(
  (privilege(Pod, Level) :-
	compromised(Pod, privEscalation, Level)),
  rule_desc('',
  0.0)).

interaction_rule(
  (compromised(Pod, dos) :-
	compromised(Dependency, dos)
    dependsOn(Pod, Dependency)),
  rule_desc('Pod compromised: DoS on Pod dependency',
  0.0)).


/******** Extracted rules ********/