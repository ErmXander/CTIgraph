/******************************************************/
/****         Predicates Declaration              *****/
/******************************************************/

primitive(attackerLocated(_pod)).

primitive(vulExists(_library, _libVer, _vulID)).
primitive(hasLibrary(_pod, _library, _libVer)).
primitive(libraryHasArtifact(_library, _artID)).
primitive(serviceHasArtifact(_servName, _artID)).
primitive(exposesService(_pod, _servName, _proto, _port)).
primitive(mounts(_pod, _type, _path)).
primitive(dependsOn(_pod1, _pod2)).
primitive(hasTrustLevel(_pod, _trustLevel)).
primitive(netRule(_pod1, _pod2, _proto, _port, _direction, _action)).
primitive(hasCountermeasure(_pod, _dID)).

primitive(techniqueArtifact(_tID, _artID)).
primitive(techniqueExploits(_tID, _vulID)).

primitive(unachievable(_literal)).

derived(allowedFlow(_src, _dst, _prot, _port)).
derived(vulExists(_pod, _vulID)).
derived(podArtifact(_pod, _artID)).
derived(reachable(_pod, _protocol, _port)).

derived(podTargetable(_pod, _tID)).
derived(podExploitable(_pod, _tID)).



derived(dos(_pod)).
derived(codeExec(_pod)).
derived(fileAccess(_pod, _file, _perm)).
derived(privilege(_pod, _level)).
derived(credentialAccess(_acc)).
derived(remoteAccess(_pod)).
derived(persistence(_pod)).
derived(dataManipulation(_pod)).

meta(attackGoal(_)).
meta(advances(_, _)).


/******************************************************/
/****         Tabling Predicates                  *****/
/*   All derived predicates should be tabled          */
/******************************************************/

:- table allowedFlow/4.
:- table vulExists/2.
:- table podArtifact/2.

:- table reachable/3.
:- table podTargetable/2.
:- table podExploitable/2.

:- table dos/1.
:- table codeExec/1.
:- table fileAccess/3.
:- table privilege/2.
:- table credentialAccess/1.
:- table remoteAccess/1.
:- table persistence/1.
:- table dataManipulation/1.


/******************************************************/
/****         Interaction Rules                   *****/
/******************************************************/


/******** Section vulnerability ********/

interaction_rule(
  (vulExists(Pod, VulID) :-
	vulExists(Lib, LibVer, VulID),
	hasLibrary(Pod, Lib, LibVer)),
  rule_desc('pod vulnerable',
  0.0)).


/******** Section artifact ********/

interaction_rule(
  (podArtifact(Pod, ArtID) :-
	hasLibrary(Pod, Lib, LibVer),
    libraryHasArtifact(Lib, ArtID)),
  rule_desc('pod artifact from library',
  0.0)).

interaction_rule(
  (podArtifact(Pod, ArtID) :-
	exposesService(Pod, ServName, Proto, Port),
    serviceHasArtifact(ServName, ArtID)),
  rule_desc('pod artifact from service',
  0.0)).


/******** Section network ********/

interaction_rule(
  (allowedFlow(Psrc, Pdst, Protocol, Port) :-
	netRule(Psrc, Pdst, Protocol, Port, egress, allow),
	netRule(Pdst, Psrc, Protocol, Port, ingress, allow),
  not netRule(Psrc, Pdst, Protocol, Port, egress, deny),
  not netRule(Pdst, Psrc, Protocol, Port, ingress, deny),
  not dependsOn(Pdst, Psrc)),
  rule_desc('valid hacl',
  0.0)).

interaction_rule(
  (allowedFlow(P, internet, Protocol, Port) :-
	netRule(P, internet, Protocol, Port, egress, allow),
  not netRule(P, internet, Protocol, Port, egress, deny)),
  rule_desc('',
  0.0)).

interaction_rule(
  (allowedFlow(internet, P, Protocol, Port) :-
	netRule(P, internet, Protocol, Port, ingress, allow),
  not netRule(P, internet, Protocol, Port, ingress, deny)),
  rule_desc('',
  0.0)).

interaction_rule(
  (reachable(P, Protocol, Port) :-
  attackerLocated(Zone),
	allowedFlow(Zone, P, Protocol, Port)),
  rule_desc('directly reachable',
  0.0)).

interaction_rule(
  (reachable(P, _, _) :-
  attackerLocated(P)),
  rule_desc('attacker in pod',
  0.0)).

interaction_rule(
  (reachable(P2, Protocol, Port) :-
	codeExec(P1),
  allowedFlow(P1, P2, Protocol, Port)),
  rule_desc('pod reached via multi-hop',
  0.0)).


/******** Section technique applicability ********/

interaction_rule(
  (podExploitable(P, TID) :-
  podArtifact(P, ArtID),
  techniqueArtifact(TID, ArtID),
  vulExists(P, VulID),
  techniqueExploits(TID, VulID)),
  rule_desc('compatible art+vuln',
  0.0)).

interaction_rule(
  (podTargetable(P, TID) :-
  podArtifact(P, ArtID),
  techniqueArtifact(TID, ArtID)),
  rule_desc('compatible artifact',
  0.0)).


/******** Section compromised ********/

interaction_rule(
  (dos(P) :-
	dos(Dependency),
  dependsOn(P, Dependency)),
  rule_desc('DoS on pod dependency',
  0.0)).

interaction_rule(
  (codeExec(P) :-
	unachievable(P)),
  rule_desc('',
  0.0)).

interaction_rule(
  (fileAccess(P, F, Perm) :-
	unachievable(P),
  unachievable(F),
  unachievable(Perm)),
  rule_desc('',
  0.0)).

interaction_rule(
  (privilege(P, L) :-
	unachievable(P),
  unachievable(L)),
  rule_desc('',
  0.0)).

interaction_rule(
  (credentialAccess(A) :-
	unachievable(A)),
  rule_desc('',
  0.0)).

interaction_rule(
  (remoteAccess(P) :-
	unachievable(P)),
  rule_desc('',
  0.0)).

interaction_rule(
  (persistence(P) :-
	unachievable(P)),
  rule_desc('',
  0.0)).

interaction_rule(
  (dataManipulation(P) :-
	unachievable(P)),
  rule_desc('',
  0.0)).


/******** Extracted rules and tabled predicates ********/

derived(t1190_attack_step(_pod)).

:- table t1190_attack_step/1.

interaction_rule(
	(t1190_attack_step(Pod) :-
		podExploitable(Pod, t1190),
		not hasCountermeasure(Pod, 'd3-phdura'),
		not hasCountermeasure(Pod, 'd3-itf'),
		not hasCountermeasure(Pod, 'd3-psep'),
		not hasCountermeasure(Pod, 'd3-pmad'),
		not hasCountermeasure(Pod, 'd3-ntcd'),
		not hasCountermeasure(Pod, 'd3-uglpa'),
		not hasCountermeasure(Pod, 'd3-ntf'),
		not hasCountermeasure(Pod, 'd3-isva'),
		not hasCountermeasure(Pod, 'd3-saor'),
		not hasCountermeasure(Pod, 'd3-ntsa'),
		not hasCountermeasure(Pod, 'd3-dqsa'),
		not hasCountermeasure(Pod, 'd3-rtsd'),
		not hasCountermeasure(Pod, 'd3-cspp'),
		reachable(Pod, _, _)),
	rule_desc('TECHNIQUE t1190 - Exploit Public-Facing Application',
	0.0)).


interaction_rule(
	(codeExec(Pod) :-
	t1190_attack_step(Pod)),
	rule_desc('COMPROMISED - Code Execution',
	0.0)).

interaction_rule(
	(remoteAccess(Pod) :-
	t1190_attack_step(Pod)),
	rule_desc('COMPROMISED - Remote Access',
	0.0)).

derived(t1498_attack_step(_pod)).

:- table t1498_attack_step/1.

interaction_rule(
	(t1498_attack_step(Pod) :-
		podTargetable(Pod, t1498),
		not hasCountermeasure(Pod, 'd3-phdura'),
		not hasCountermeasure(Pod, 'd3-itf'),
		not hasCountermeasure(Pod, 'd3-pmad'),
		not hasCountermeasure(Pod, 'd3-ntcd'),
		not hasCountermeasure(Pod, 'd3-cspp'),
		not hasCountermeasure(Pod, 'd3-uglpa'),
		not hasCountermeasure(Pod, 'd3-ntf'),
		not hasCountermeasure(Pod, 'd3-ntsa'),
		not hasCountermeasure(Pod, 'd3-isva'),
		not hasCountermeasure(Pod, 'd3-rtsd'),
		reachable(Pod, _, _)),
	rule_desc('TECHNIQUE t1498 - Network Denial of Service',
	0.0)).


interaction_rule(
	(dos(Pod) :-
	t1498_attack_step(Pod)),
	rule_desc('COMPROMISED - Denial of Service',
	0.0)).

